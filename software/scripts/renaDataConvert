#!/usr/bin/env python3

import argparse
import pyrogue

# Set the argument parser
parser = argparse.ArgumentParser('UCSC H&N Pet Convert')

parser.add_argument(
    "--local",
    action   = 'store_true',
    required = False,
    default  = False,
    help     = "Use local python libraries (git checkout)."
)

parser.add_argument(
    "--input",
    type     = str,
    required = True,
    help     = "Input File.",
)

parser.add_argument(
    "--output",
    type     = str,
    required = False,
    default  = None,
    help     = "Output File.",
)

parser.add_argument(
    "--update",
    type     = int,
    required = False,
    default  = 10,
    help     = "Update interval",
)

# Get the arguments
args = parser.parse_args()

if args.local:
    pyrogue.addLibraryPath('../../firmware/submodules/rce-gen3-fw-lib/python')
    pyrogue.addLibraryPath('../../firmware/submodules/surf/python')
    pyrogue.addLibraryPath('../../firmware/python')
    pyrogue.addLibraryPath('../python')

if args.output is None:
    output = args.input.replace(".dat",".txt")
else:
    output = args.output

import ucsc_hn_lib
import sys
import time
import threading

def process_data (inFile, outFile, df):
    df.convertFile(inFile, outFile)

df = ucsc_hn_lib.RenaDataFormat()

runThread = threading.Thread(target=process_data, args=(args.input, output, df))
runThread.start()
ltime = time.time()
print(f"Converting {args.input} to {output}. Updating status every {args.update} seconds.")

def show_progress(df):
    fileSize = df.getFileSize()
    fileRead = df.getFileRead()
    readBytes = df.getByteCount()
    readFrames = df.getFrameCount()
    dropCount = df.getDropCount()
    sampCount = df.getSampleCount()

    ltime = time.time()

    pct = int((float(fileRead) / float(fileSize)) * 100.0);
    vPct = int((float(readBytes) / float(fileRead)) * 100.0);

    print(f"Read {fileRead} of {fileSize} bytes, {pct} pct. Valid = {readBytes}, {vPct} pct, Frames = {readFrames}, drops = {dropCount}, samples = {sampCount}")

while runThread.is_alive():

    if time.time() - ltime > float(args.update):
        show_progress(df)
        ltime = time.time()

show_progress(df)
